// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace qa_automation_mars.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Skill Functionality")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class SkillFunctionalityFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Skill Functionality", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "Skillpage.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a new skill")]
        [NUnit.Framework.CategoryAttribute("mars")]
        [NUnit.Framework.CategoryAttribute("skill")]
        [NUnit.Framework.TestCaseAttribute("ShirishaG.@g.com", "123456", "Manual Testing", "Beginner", null)]
        [NUnit.Framework.TestCaseAttribute("ShirishaG.@g.com", "123456", "longTextInputslongTextInputslongTextInputslongTextInputslongTextInputs", "Beginner", null)]
        public async System.Threading.Tasks.Task AddANewSkill(string email, string password, string skillValue, string skilllLevelValue, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mars",
                    "skill"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("password", password);
            argumentsOfScenario.Add("skillValue", skillValue);
            argumentsOfScenario.Add("skilllLevelValue", skilllLevelValue);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Add a new skill", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await testRunner.GivenAsync(string.Format("I logged into mars application successfully \'{0}\' and \'{1}\' and navigated to Skil" +
                            "ls page", email, password), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
await testRunner.WhenAsync(string.Format("I add a new skill \'{0}\' and \'{1}\'", skillValue, skilllLevelValue), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
await testRunner.ThenAsync(string.Format("New skill should be successfully created \'{0}\'", skillValue), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Edit an existing skill")]
        [NUnit.Framework.TestCaseAttribute("ShirishaG.@g.com", "123456", "Automation Testing", "Expert", null)]
        public async System.Threading.Tasks.Task EditAnExistingSkill(string email, string password, string skillValue, string skilllLevelValue, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("password", password);
            argumentsOfScenario.Add("skillValue", skillValue);
            argumentsOfScenario.Add("skilllLevelValue", skilllLevelValue);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Edit an existing skill", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 18
await testRunner.GivenAsync(string.Format("I logged into mars application successfully \'{0}\' and \'{1}\' and navigated to Skil" +
                            "ls page", email, password), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 19
await testRunner.WhenAsync(string.Format("I update an existing skill \'{0}\' and \'{1}\'", skillValue, skilllLevelValue), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 20
await testRunner.ThenAsync(string.Format("The updated skill with modified data should be successfully updated \'{0}\'", skillValue), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete an existing skill")]
        [NUnit.Framework.TestCaseAttribute("ShirishaG.@g.com", "123456", null)]
        public async System.Threading.Tasks.Task DeleteAnExistingSkill(string email, string password, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("password", password);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Delete an existing skill", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 26
await testRunner.GivenAsync(string.Format("I logged into mars application successfully \'{0}\' and \'{1}\' and navigated to Skil" +
                            "ls page", email, password), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 27
await testRunner.WhenAsync("I delete an existing skill", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 28
await testRunner.ThenAsync("The existing skill should be successfully removed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify adding same skill with different skill levels")]
        [NUnit.Framework.TestCaseAttribute("ShirishaG.@g.com", "123456", "Selenium", "Beginner", "Expert", null)]
        public async System.Threading.Tasks.Task VerifyAddingSameSkillWithDifferentSkillLevels(string email, string password, string skillValue, string skilllLevelValue, string skilllevelValuetwo, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("password", password);
            argumentsOfScenario.Add("skillValue", skillValue);
            argumentsOfScenario.Add("skilllLevelValue", skilllLevelValue);
            argumentsOfScenario.Add("skilllevelValuetwo", skilllevelValuetwo);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify adding same skill with different skill levels", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 34
await testRunner.GivenAsync(string.Format("I logged into mars application successfully \'{0}\' and \'{1}\' and navigated to Skil" +
                            "ls page", email, password), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 35
await testRunner.WhenAsync(string.Format("I add same skill with different skill levels \'{0}\' and \'{1}\' and \'{2}\'", skillValue, skilllLevelValue, skilllevelValuetwo), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 36
await testRunner.ThenAsync("An error message Duplicated data should be shown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Attempt to add the same skill twice")]
        [NUnit.Framework.TestCaseAttribute("ShirishaG.@g.com", "123456", "Postman", "Beginner", null)]
        public async System.Threading.Tasks.Task AttemptToAddTheSameSkillTwice(string email, string password, string skillValue, string skilllLevelValue, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("password", password);
            argumentsOfScenario.Add("skillValue", skillValue);
            argumentsOfScenario.Add("skilllLevelValue", skilllLevelValue);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Attempt to add the same skill twice", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 42
await testRunner.GivenAsync(string.Format("I logged into mars application successfully \'{0}\' and \'{1}\' and navigated to Skil" +
                            "ls page", email, password), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 43
await testRunner.WhenAsync(string.Format("I add same skill twice with same skill level \'{0}\' and \'{1}\'", skillValue, skilllLevelValue), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 44
await testRunner.ThenAsync("An error message skill is already exist in your skill list should be shown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Try to add an empty skill")]
        [NUnit.Framework.TestCaseAttribute("ShirishaG.@g.com", "123456", "\"\"", "Choose Skill Level", null)]
        public async System.Threading.Tasks.Task TryToAddAnEmptySkill(string email, string password, string skillValue, string skilllLevelValue, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("password", password);
            argumentsOfScenario.Add("skillValue", skillValue);
            argumentsOfScenario.Add("skilllLevelValue", skilllLevelValue);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Try to add an empty skill", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 50
await testRunner.GivenAsync(string.Format("I logged into mars application successfully \'{0}\' and \'{1}\' and navigated to Skil" +
                            "ls page", email, password), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 51
await testRunner.WhenAsync(string.Format("I add an empty skill \'{0}\' and \'{1}\'", skillValue, skilllLevelValue), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 52
await testRunner.ThenAsync("An error message Please enter skill and level should be shown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Try to add a skill without selecting level")]
        [NUnit.Framework.TestCaseAttribute("ShirishaG.@g.com", "123456", "Github", "Choose Skill Level", null)]
        public async System.Threading.Tasks.Task TryToAddASkillWithoutSelectingLevel(string email, string password, string skillValue, string skilllLevelValue, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("password", password);
            argumentsOfScenario.Add("skillValue", skillValue);
            argumentsOfScenario.Add("skilllLevelValue", skilllLevelValue);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Try to add a skill without selecting level", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 59
await testRunner.GivenAsync(string.Format("I logged into mars application successfully \'{0}\' and \'{1}\' and navigated to Skil" +
                            "ls page", email, password), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 60
await testRunner.WhenAsync(string.Format("I add a new skill \'{0}\' and  empty skill level \'{1}\'", skillValue, skilllLevelValue), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 61
await testRunner.ThenAsync("An error message Please enter skill and level should be displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
